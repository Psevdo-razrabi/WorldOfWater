//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Sources/Scripts/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""033ee448-9b33-422b-9c7b-dbedc5f2e4cc"",
            ""actions"": [
                {
                    ""name"": ""ToolThrow"",
                    ""type"": ""Button"",
                    ""id"": ""e5581492-29e1-4cff-b9d1-a1bb98b8de53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToolBack"",
                    ""type"": ""Button"",
                    ""id"": ""cb787e7c-f9dc-413f-85ad-79659e48c5e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WaterBack"",
                    ""type"": ""Button"",
                    ""id"": ""110754e1-77b4-4884-a50a-2166265aef54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b3fc7ab-6c30-4908-9436-932582c00154"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToolThrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""563fa3a1-d8ce-44a6-9c37-484342951a22"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToolBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75065339-341f-4305-bf03-6b68b8006ca5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WaterBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_ToolThrow = m_Game.FindAction("ToolThrow", throwIfNotFound: true);
        m_Game_ToolBack = m_Game.FindAction("ToolBack", throwIfNotFound: true);
        m_Game_WaterBack = m_Game.FindAction("WaterBack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_ToolThrow;
    private readonly InputAction m_Game_ToolBack;
    private readonly InputAction m_Game_WaterBack;
    public struct GameActions
    {
        private @InputSystem m_Wrapper;
        public GameActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToolThrow => m_Wrapper.m_Game_ToolThrow;
        public InputAction @ToolBack => m_Wrapper.m_Game_ToolBack;
        public InputAction @WaterBack => m_Wrapper.m_Game_WaterBack;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @ToolThrow.started += instance.OnToolThrow;
            @ToolThrow.performed += instance.OnToolThrow;
            @ToolThrow.canceled += instance.OnToolThrow;
            @ToolBack.started += instance.OnToolBack;
            @ToolBack.performed += instance.OnToolBack;
            @ToolBack.canceled += instance.OnToolBack;
            @WaterBack.started += instance.OnWaterBack;
            @WaterBack.performed += instance.OnWaterBack;
            @WaterBack.canceled += instance.OnWaterBack;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @ToolThrow.started -= instance.OnToolThrow;
            @ToolThrow.performed -= instance.OnToolThrow;
            @ToolThrow.canceled -= instance.OnToolThrow;
            @ToolBack.started -= instance.OnToolBack;
            @ToolBack.performed -= instance.OnToolBack;
            @ToolBack.canceled -= instance.OnToolBack;
            @WaterBack.started -= instance.OnWaterBack;
            @WaterBack.performed -= instance.OnWaterBack;
            @WaterBack.canceled -= instance.OnWaterBack;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnToolThrow(InputAction.CallbackContext context);
        void OnToolBack(InputAction.CallbackContext context);
        void OnWaterBack(InputAction.CallbackContext context);
    }
}
