//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActionAssets/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""dbe39956-75db-43dc-aa35-add067e91276"",
            ""actions"": [
                {
                    ""name"": ""BuildMode"",
                    ""type"": ""Button"",
                    ""id"": ""eb3ac6f7-d470-4cac-8e96-2e755d11380f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuitBuildMode"",
                    ""type"": ""Button"",
                    ""id"": ""f85c0cf7-c494-4b74-b643-088b9a1f585c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectNextBuild"",
                    ""type"": ""Button"",
                    ""id"": ""4a3a9502-84a5-4add-a6e0-9ae1b7ae39f2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectPrevBuild"",
                    ""type"": ""Button"",
                    ""id"": ""8d8d2090-20b1-4e0a-aa3a-fe1379edb658"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a8d7bfa-ef44-4977-ad09-7e51c47732ec"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e4d5304-18ea-4cc9-960a-8de068ea7950"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuitBuildMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e07ef379-eb52-4c04-ab4b-2c511097d125"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectNextBuild"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d399125-2206-4e2f-ae97-96b6c55a41f4"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPrevBuild"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_BuildMode = m_Gameplay.FindAction("BuildMode", throwIfNotFound: true);
        m_Gameplay_QuitBuildMode = m_Gameplay.FindAction("QuitBuildMode", throwIfNotFound: true);
        m_Gameplay_SelectNextBuild = m_Gameplay.FindAction("SelectNextBuild", throwIfNotFound: true);
        m_Gameplay_SelectPrevBuild = m_Gameplay.FindAction("SelectPrevBuild", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, PlayerControls.Gameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_BuildMode;
    private readonly InputAction m_Gameplay_QuitBuildMode;
    private readonly InputAction m_Gameplay_SelectNextBuild;
    private readonly InputAction m_Gameplay_SelectPrevBuild;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BuildMode => m_Wrapper.m_Gameplay_BuildMode;
        public InputAction @QuitBuildMode => m_Wrapper.m_Gameplay_QuitBuildMode;
        public InputAction @SelectNextBuild => m_Wrapper.m_Gameplay_SelectNextBuild;
        public InputAction @SelectPrevBuild => m_Wrapper.m_Gameplay_SelectPrevBuild;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @BuildMode.started += instance.OnBuildMode;
            @BuildMode.performed += instance.OnBuildMode;
            @BuildMode.canceled += instance.OnBuildMode;
            @QuitBuildMode.started += instance.OnQuitBuildMode;
            @QuitBuildMode.performed += instance.OnQuitBuildMode;
            @QuitBuildMode.canceled += instance.OnQuitBuildMode;
            @SelectNextBuild.started += instance.OnSelectNextBuild;
            @SelectNextBuild.performed += instance.OnSelectNextBuild;
            @SelectNextBuild.canceled += instance.OnSelectNextBuild;
            @SelectPrevBuild.started += instance.OnSelectPrevBuild;
            @SelectPrevBuild.performed += instance.OnSelectPrevBuild;
            @SelectPrevBuild.canceled += instance.OnSelectPrevBuild;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @BuildMode.started -= instance.OnBuildMode;
            @BuildMode.performed -= instance.OnBuildMode;
            @BuildMode.canceled -= instance.OnBuildMode;
            @QuitBuildMode.started -= instance.OnQuitBuildMode;
            @QuitBuildMode.performed -= instance.OnQuitBuildMode;
            @QuitBuildMode.canceled -= instance.OnQuitBuildMode;
            @SelectNextBuild.started -= instance.OnSelectNextBuild;
            @SelectNextBuild.performed -= instance.OnSelectNextBuild;
            @SelectNextBuild.canceled -= instance.OnSelectNextBuild;
            @SelectPrevBuild.started -= instance.OnSelectPrevBuild;
            @SelectPrevBuild.performed -= instance.OnSelectPrevBuild;
            @SelectPrevBuild.canceled -= instance.OnSelectPrevBuild;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnBuildMode(InputAction.CallbackContext context);
        void OnQuitBuildMode(InputAction.CallbackContext context);
        void OnSelectNextBuild(InputAction.CallbackContext context);
        void OnSelectPrevBuild(InputAction.CallbackContext context);
    }
}
